<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0">
    <channel>
        <title>Caridy - Random Bubbles</title>
        <link>http://caridy.name/blog/</link>
        
            <item>
                <title>Bending Express to Support Synthetic Views</title>
                <link>http://caridy.name/blog/2013/05/bending-express-to-support-synthetic-views/</link>
                <pubDate>Tue May 21 2013 00:00:00 GMT-0400 (EDT)</pubDate>
                <description><![CDATA[<p>Express<sup>[1]</sup> is a wonderful piece of software, not because of the quality of the code and documentation--which are very good--but because of its simplicity. That simplicity, however, comes with a cost that forces users to follow certain guidelines; this is the case of views in Express, where a view has to be bound to a filesystem path. When creating complex applications, there are tricks you can use to get to the next level. Today, I want to touch on the view resolution mechanism in Express and how to tweak it to support what I call synthetic views.

</p>
<p>Express supports a variety of view engines, and you can use almost any kind of template language by simply looking for the proper engine implementation for Express. Moreover, creating a new engine is a breeze, and it works wonderfully. Here is an example of Express using @ericf&#39;s <code>express3-handlebars</code><sup>[2]</sup> package, which adds support for Handlebars<sup>[3]</sup> templates.

</p>
<pre><code><span class="keyword">var</span> app = <span class="keyword">require</span>(<span class="string">'express'</span>)();

app.engine(<span class="string">'hbs'</span>, <span class="keyword">require</span>(<span class="string">'express3-handlebars'</span>)());
app.set(<span class="string">'view engine'</span>, <span class="string">'hbs'</span>);

app.get(<span class="string">'/'</span>, <span class="keyword">function</span> (req, res, next) {
  res.render(<span class="string">'foo'</span>);
});
app.listen(<span class="number">3000</span>);</code></pre>
<p>In the example above, when requesting <code>http://localhost:3000/</code>, the template <code>./views/foo.hbs</code> will be located, compiled, and rendered. As you can see, this is fairly simple, and on top of that, Express will take care of many details, including the cache mechanism for each view, error handling, and filesystem path resolution. It just works and performs remarkably well, but note that it is also bound to a filesystem path to locate <code>foo.hbs</code>.

</p>
<h2>Express&#39;s Internal View Mechanism</h2>
<p>The very simple mechanism used by Express to resolve the view is based on few basic configurations:

</p>
<ul>
<li><code>view cache</code> - enables view template compilation caching and is enabled in production by default.</li>
<li><code>view engine</code> - is the default engine extension.</li>
<li><code>views</code> - is the view directory path, which defaults to <code>process.cwd() + &#39;/views&#39;</code>.</li>
</ul>
<p>and, of course, the view engine registration process: 

</p>
<ul>
<li><code>app.engine(ext, callback)</code> - registers the given template engine <code>callback</code> as <code>ext</code>.</li>
</ul>
<p>Based on those three settings and the registration method, Express will be able to locate, cache, and render any view within the <code>root</code> folder if there is a corresponding engine. When calling <code>res.render(name, options)</code>, Express creates a new instance of <code>View</code>, which is an internal component. As part of the constructor, the instance tries to locate the template in the filesystem based on the <code>views</code> setting (using the filename extension from <code>name</code> to detect the proper engine to render the template or the fallbacks to the default engine from <code>view engine</code> setting), and then allocates an internal property called <code>path</code>.

</p>
<h2>Express&#39; Synthetic Views</h2>
<p>What if our templates are not in the filesystem and instead need to be accessed from somewhere else, such as a database, through a REST-like API, or even from memory in the form of compiled JavaScript? How can we gain control over the template resolution? In the end, a view instance is just an object with a <code>render</code> method that expects some <code>data</code> to produce a blob in an asynchronous fashion.

</p>
<p>By default, Express implements a <code>View</code> constructor, which takes care of the resolution mechanism. In the past, the <code>View</code> component was private, and there was no way to modify it. That has changed in the <code>express@3.2.0</code>, thanks to @tjholowaychuk for merging our pull request which allows you to a) replace the <code>View</code> constructor and b) modify the <code>View</code> constructor shipped with <code>express</code>. This is also possible through the new <code>view</code> configuration. Here is an example of how to replace the <code>View</code> component:

</p>
<pre><code><span class="keyword">var</span> app = <span class="keyword">require</span>(<span class="string">'express'</span>)();

app.set(<span class="string">'view'</span>, MyNewViewConstructor);

app.get(<span class="string">'/'</span>, <span class="keyword">function</span> (req, res, next) {
  res.render(<span class="string">'foo'</span>);
});
app.listen(<span class="number">3000</span>);</code></pre>
<p>On the other hand, if you just want to tweak the <code>View</code> component shipped with <code>express</code>, you can still do it by modifying the <code>prototype</code> methods. Here is an example of that:

</p>
<pre><code><span class="keyword">var</span> app = <span class="keyword">require</span>(<span class="string">'express'</span>)();

app.set(<span class="string">'view'</span>).prototype.lookup = <span class="keyword">function</span>(name) {
  <span class="comment">// and here you can do whatever you want to resolve the template by name</span>
  <span class="keyword">return</span> myInternalResolver(path); <span class="comment">// which returns a path!</span>
};

app.get(<span class="string">'/'</span>, <span class="keyword">function</span> (req, res, next) {
    res.render(<span class="string">'foo'</span>);
});
app.listen(<span class="number">3000</span>);</code></pre>
<p>If you decide to change the <code>View</code> component&#39;s prototype, you will have to validate your implementation against new versions of Express because the implementation might change in the future. My recommendation at this point is to replace it with your own implementation as it is a fairly simple component with a very specific responsibility.

</p>
<p>In this gist, <a href="https://gist.github.com/caridy/b925ab5f6c1023765172#file-view-js">View.js</a><sup>[4]</sup> describes how to implement a <code>View</code> component that can work with a DB, a REST-like API, a global memory hash, or a compiled view accessible through <code>require()</code>. It pretty much covers all the options you have today to fetch and compile a template bound to a view instance.

</p>
<h2>Compiled Templates for Better Performance and Interoperability</h2>
<p>At Yahoo!, we have been trying to create building blocks to help blur the line between the server and client, where sharing code and logic is critical. Knowing that compiling views on the client is just no longer an option, we pre-compiled views into JavaScript for the client runtime. Later, we thought, why not use those same pre-compiled templates on the server as well? It just made a lot of sense.

</p>
<p>This use case drove us to propose a change in Express, so we can create a custom <code>View</code> to allow templates to be required and allocated in memory during the application&#39;s boot process, when the filesystem representation for the templates is no longer needed and a memory allocation is used instead. That single twist improves performance and reduces the forking in the logic to interoperate between runtimes.

</p>
<h2>Conclusion</h2>
<p>The new <code>view</code> setting introduced in <code>express@3.2.0</code> provides a simple way to replace or customize the internal mechanism to look up and render views in Express. This new feature can allow us to blur the line between the look up and compile processes as well as eliminate the filesystem requirements, and ultimately enables us to use remote templates, remote compilers, a pre-compiler, and even fetch templates from a database or a REST-like API, while still relying on Express to handle the view instances cache and invocation mechanism.

</p>
<h2>References</h2>
<ol>
<li><a href="http://expressjs.com">Express</a> (Expressjs Official Website)</li>
<li><a href="http://github.com/ericf/express3-handlebars">express3-handlebars</a> (GitHub)</li>
<li><a href="http://handlebarsjs.com/">Handlebars</a> (Official Website)</li>
<li><a href="https://gist.github.com/caridy/b925ab5f6c1023765172">Gist with sample</a></li>
</ol>
]]></description>
            </item>
        
            <item>
                <title>YUIConf 2012: Mojito for YUI Developers (video)</title>
                <link>http://caridy.name/blog/2012/12/yuiconf2012-mojito-for-yui-developers/</link>
                <pubDate>Fri Dec 07 2012 00:00:00 GMT-0500 (EST)</pubDate>
                <description><![CDATA[<p>When/Where: Nov 14th 2012, YUIConf in Santa Clara, CA.</p>
<p>We use YUI on the daily basis in a form of building blocks, but when it comes to boilerplating our projects, we are on our own. Mojito provides a unique opportunity for YUI developers to speed up the development process by providing boilerplate and building capabilities for YUI projects by offering a variety of options to build traditional YUI web apps, mobile apps to deploy on devices, and Node.JS applications as well. It does it by leveraging YUI Library and YUI Tool chains to build at scale.</p>
<p>Here is the recorded <a href="http://www.youtube.com/watch?v=e-wspy6DicE&amp;hd=1">video</a>:</p>
<p><iframe width="608" height="456" src="http://www.youtube.com/embed/e-wspy6DicE" frameborder="0" allowfullscreen=""></iframe></p>
<p>Here are the <a href="http://www.slideshare.net/caridy/yuiconf2012-mojito-for-yui-developers">slides</a>:</p>
<p><iframe src="http://www.slideshare.net/slideshow/embed_code/15181276" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen="allowfullscreen"></iframe></p>]]></description>
            </item>
        
            <item>
                <title>Webinar: Custom and secure settings in Mojito</title>
                <link>http://caridy.name/blog/2012/08/webinar-custom-and-secure-settings-in-mojito/</link>
                <pubDate>Thu Aug 02 2012 00:00:00 GMT-0400 (EDT)</pubDate>
                <description><![CDATA[<p><iframe width="608" height="456" src="http://www.youtube.com/embed/1PVM7zIINqA" frameborder="0" allowfullscreen=""></iframe></p>
<p><a href="http://www.youtube.com/watch?v=1PVM7zIINqA&amp;hd=1">HD Video</a></p>
<p>Topics covered in this screencast:</p>
<ul>
<li>Mojito 0.3.30 (boiler plate for app and simple mojit)</li>
<li>Application.json specs and mojit instances</li>
<li>Simple routes</li>
<li>Configuration per mojit instance</li>
<li>Security risks when using configurations</li>
<li>Defaults.json to define basic configurations</li>
<li>The runtime server configuration to protect your settings and routes</li>
<li>Edge case to have protected global settings per mojit instance</li>
</ul>
<p>Original Code:</p>

<ul>
<li><a href="https://github.com/caridy/mojito-demos/tree/master/secure-configs">https://github.com/caridy/mojito-demos/tree/master/secure-configs</a></li>
</ul>
<p><p>More info about some of the topics mentioned in the screencast:</p>
</p>
<ul>
<li><a href="http://developer.yahoo.com/cocktails/mojito/docs/topics/mojito_npm.html">Creating shareable Mojits that can be re-use across different applications using NPM</a></li>
<li><a href="http://developer.yahoo.com/cocktails/mojito/docs/code_exs/route_config.html">Routes in Mojito</a></li>
<li><a href="http://developer.yahoo.com/cocktails/mojito/docs/intro/mojito_configuring.html#specs-obj">Application.json – Specs and other settings</a></li>
<li><a href="http://developer.yahoo.com/cocktails/mojito/docs/topics/mojito_using_contexts.html">Using mojito context</a></li>
<li><a href="http://developer.yahoo.com/cocktails/mojito/docs/faq/#moj-definition-defaults">definition.json vs defaults.json</a></li>
</ul>]]></description>
            </item>
        
            <item>
                <title>BayJax Presentation: Expanding Yahoo! Axis Across 3 Screens</title>
                <link>http://caridy.name/blog/2012/07/expanding-yahoo-axis-across-3-screens/</link>
                <pubDate>Thu Jul 12 2012 00:00:00 GMT-0400 (EDT)</pubDate>
                <description><![CDATA[<p>When/Where: June 25th, 2012, BayJax at Yahoo! Campus in Sunnyvale, CA.</p>
<p>Discussing Yahoo!’s new search browser experience, the Yahoo! Axis, and the challenges involved in building it. The talk covers the Mojito-based implementation of Axis, the “Reuse-Reduce-Replace” software philosophy, and the notions of optimization and adaptation in the context of Mojito! </p>
<p>Here is the recorded <a href="http://www.youtube.com/watch?v=oNki-D0lCsM&amp;hd=1">video</a>:</p>
<p><iframe width="608" height="456" src="http://www.youtube.com/embed/oNki-D0lCsM" frameborder="0" allowfullscreen=""></iframe></p>
<p>Here are the <a href="http://www.slideshare.net/caridy/bayjax">slides</a>:</p>
<p><iframe src="http://www.slideshare.net/slideshow/embed_code/13460069" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen="allowfullscreen"></iframe></p>]]></description>
            </item>
        
            <item>
                <title>Webinar: “YUI Open Hours: Yahoo! Axis” (first half)</title>
                <link>http://caridy.name/blog/2012/06/webinar-yui-open-hours-yahoo-axis-first-half/</link>
                <pubDate>Fri Jun 15 2012 00:00:00 GMT-0400 (EDT)</pubDate>
                <description><![CDATA[<p>Yesterday <a href="http://twitter.com/ekashida">@ekashida</a> and I did a quick walkthrough on the technical part of Yahoo! Axis, specifically the front end and the web components. Here is the recorded session:</p>
<p><iframe width="608" height="456" src="http://www.youtube.com/embed/vIvFbJo1Fj8" frameborder="0" allowfullscreen=""></iframe><br>

 * <a href="http://www.youtube.com/watch?v=vIvFbJo1Fj8&amp;hd=1">http://www.youtube.com/watch?v=vIvFbJo1Fj8&amp;hd=1</a>

<p>These are some of the bullets we covered during this first half:</p>
<h3>Yahoo! axis architecture</h3>
<ul>
<li>(caridy) why native (performance, stability, etc)</li>
<li>(caridy) why web (reusable pieces, transparent updates, fine grained layouts using css, buckets, experimentation, etc)</li>
<li>(caridy) why hybrid (why BM is native, why SL is web, why Omni bar is native)</li>
<li>(keugene) why hybrid (how we mimic some of the native pieces for web)</li>
<li>(keugene) creating/destroying apps as needed to avoid memory leak issues altogether</li>
<li>(caridy / keugene) why independent apps and how it works</li>
</ul>
<h3>YUI Components used and extended in Yahoo! Axis</h3>
<ul>
<li>(keugene) [yui core infrastructure] extensions vs plugins (registration, race conditions, configs, etc)</li>
<li>(keugene) communication layer Y.CL overview (we show both perf analysis, and the post for postmessage vs Y.CL)</li>
<li>(caridy) smart localstorage (cache-offline-smart) and how we extend yui cache-offline for better performance and manageability</li>
<li>(keugene) [scrollview-hack] hooking into scrollview-paginator to implement our own anchoring process to avoid cutting cards</li>
<li>(keugene) [scrollview-hack] optimization</li>
<li>(caridy) [scrollview-hack] defining points of interest as new events (pulling)</li>
</ul>
<p>Next week we plan to talk about “Mojito” in the context of Yahoo! Axis.</p>]]></description>
            </item>
        
            <item>
                <title>PostMessage performance analysis</title>
                <link>http://caridy.name/blog/2012/06/postmessage-perf-analysis/</link>
                <pubDate>Wed Jun 13 2012 00:00:00 GMT-0400 (EDT)</pubDate>
                <description><![CDATA[<p><h3>What is a <code>postMessage</code>?</h3>
</p>
<p><code>window.postMessage</code>&nbsp;is the de facto mechanism for enabling cross-origin communication at the browser level. In other words, it allows you to send a message (in the form of a string) from one document instance to another in a secure way. It exposes an API to send bi-directional messages between two windows, making this feature ideal for mash-up implementations where you can have two completely isolated documents (running on different domains) and still have a way to keep them in sync. All you need is a reference to the receiver window to post a message to it, e.g.:</p>
<pre>receiverWindow.postMessage(message, targetOrigin);</pre>
<p>Since the&nbsp;purpose&nbsp;of this post is to do a performance analysis, I will leave the basic introduction at that. Mozilla has an extensive description of <code>postMessage</code> <sup>[1]</sup>, and since all major browsers already implement this feature using the same API, this should be enough to move on to the main topic.</p>
<h3>What is a round trip <code>postMessage</code> and how does it work?</h3>
<p>We can have a regular page that includes an <code>iframe</code> from a different domain, and we want to notify the <code>iframe</code> whenever a user interacts with the page so the <code>iframe</code> can execute some code and callback with the result of the operation. We are assuming the <code>iframe</code> doesn’t have any UI, but that’s not a requirement, we can do it backwards as well, where the user interacts with the <code>iframe</code> UI, and it has to notify the parent window about the interaction, and wait for some command. Both scenarios are valid, and perfectly doable with <code>postMessage</code>.</p>
<p>In the context of this analysis, we define a roundtrip message as a message that is sent from a parent document to a child document, and a response to that message sent from the child document to the parent document. Both documents belong to different domains and all messages are delivered via <code>postMessage</code>. The whole workflow works in an&nbsp;asynchronous&nbsp;way.</p>
<h3>Why <code>Y.CL</code>?</h3>
<p><code>Y.CL</code> is a sugar layer on top of <code>postMessage</code> to facilitate the use of <code>YUI Custom Events</code> to wrap the low level implementation. On top of that, it facilitates the hand-shaking process between two windows to avoid any race conditions and queues messages until both sides are ready to receive them. We will be talking more about <code>Y.CL</code> very soon.</p>
<h3>What are we testing here?</h3>
<p>The purpose of the test <sup>[2]</sup> is to understand how fast browsers can deliver a message via <code>postMessage</code>, in a roundtrip fashion, and see how this technique is suitable for a NRT (near-realtime) implementation. The test is an echo-like roundtrip implementation where the parent document messages the child document with the <code>string</code> “marco” and the child document responds with the <code>string</code> “polo”.</p>
<h3>Results</h3>
<p>These are the results <sup>[3]</sup>, specifically, the number of roundtrip messages that we can send <i>per second</i>:</p>
<p><iframe src="http://www.browserscope.org/user/tests/table/agt1YS1wcm9maWxlcnINCxIEVGVzdBjq_vMQDA" width="100%" height="850" frameborder="0"></iframe></p>
<p><i>Note</i>: Although <code>postMessage</code> is faster than <code>Y.CL</code>, the difference is not significant. Considering the overhead of using <code>YUI Custom Events</code> and <code>JSON.stringify()</code>, it delivers a consistent and adequate abstraction for this functionality. Again, we will be talking more in details about <code>Y.CL</code> in the upcoming days.</p>
<h3>Conclusions</h3>
<p><code>window.postMessage</code> is a mature feature, supported on all major browsers, including mobile browsers. It works pretty fast, and it is getting faster with every release. You should be able to send hundred of messages <i>per second</i>, and that should be good enough for the majority of the cases, including near-realtime applications.</p>
<p>In my opinion, it is better to isolate and maintain a consistent API through <code>postMessage</code> between two independent logical pieces in a complex application than trying to couple the two pieces into the same context. And <code>postMessage</code> could be really useful for creating mash-ups and decoupled web applications.</p>
<h3>References</h3>
<p>1. <a href="https://developer.mozilla.org/en/DOM/window.postMessage" target="_blank">Mozilla Developer Network – <code>window.postMessage</code> API Doc</a></p>
<p>2. <a href="http://jsperf.com/iframe-perf-postmessage-vs-cl/3"><code>postMessage</code> test suite on jsperf.com</a></p>
<p>3. <a href="http://www.browserscope.org/user/tests/table/agt1YS1wcm9maWxlcnINCxIEVGVzdBjq_vMQDA">Browserscope result page</a></p>]]></description>
            </item>
        
            <item>
                <title>Webinar: “YUI Open Hours: Yahoo! Axis” (second half)</title>
                <link>http://caridy.name/blog/2012/06/webinar-yui-open-hours-yahoo-axis-second-half/</link>
                <pubDate>Tue Jun 12 2012 00:00:00 GMT-0400 (EDT)</pubDate>
                <description><![CDATA[<p>As part of the second section about Axis, we focud on the mojito side. Here is the recorded session:</p>
<p><iframe width="608" height="456" src="http://www.youtube.com/embed/1T5KMozs6Sc" frameborder="0" allowfullscreen=""></iframe><br>

 <em> <a href="http://www.youtube.com/watch?v=1T5KMozs6Sc&amp;hd=1">http://www.youtube.com/watch?v=1T5KMozs6Sc&amp;hd=1</a>

<p>These are some of the bullets we covered during the second half:</p>
<h3>Mojito (on Axis)</h3>
<ul>
<li>(caridy) mojito apps can be fully configured by the time your application logic executes; no logic branching within your app based on things like device, only configurations</li>
<li>(caridy) mojito context</li>
<li>(caridy) mojito YCB (show example of </em>.json)</li>
<li>(caridy) mojito dimensions</li>
<li>(caridy) mojito tunnel (executing an action, how it preserve the context)</li>
<li>(caridy) YUI Integration – Dependencies resolution (mention shaker and screwdriver)</li>
</ul>
<p>That’s about it!</p>]]></description>
            </item>
        
            <item>
                <title>What is Mojito?</title>
                <link>http://caridy.name/blog/2012/04/what-is-mojito/</link>
                <pubDate>Mon Apr 02 2012 00:00:00 GMT-0400 (EDT)</pubDate>
                <description><![CDATA[<p>
    <img class="alignright" title="Mojito Application Framework" src="http://ydn.zenfs.com/blogs/1/mojito_logo.png"
    alt="" width="328" height="108">
</p>
<p>
    What is Mojito? Well,
    <em>
        mojito
    </em>
    is a traditional cuban drink, and since I’m originally from Cuba, I should know
    everything about it, and I do!, but today I want to talk about the other Mojito,
    the one from Yahoo!, the application framework, because today it was officially announced
    as the newest open source project.
</p>
<p>
    My team and I have been using Mojito for quite some time, we were one of the early
    adopters within the company, and we used it to build a brand new product from scratch.
    So, I know a little bit about it, and I know you will have a lot of questions about
    it. Today, I just want to address general questions, but eventually I want to drill
    down on some of the topics.
</p>
<p>
    <strong>
        Is Mojito a silver bullet for web applications?
    </strong>
</p>
<p>
    There are not silver bullets in our industry. But IMHO, Mojito brings some new concepts
    to the table, and specifically it opens a
    <em>
        new chapter for efficiency in the web
    </em>
    .
</p>
<p>
    <strong>
        How can Mojito help to create more efficient web applications?
    </strong>
</p>
<p>
    Efficiency can be achieved when you have smart software that can react to runtime
    changes. In the context of web applications, and mobile web applications, the runtime
    depends on numerous vectors, some of them completely out of our control. For example,
    connection speed, battery life, traffic peaks, browser capabilities, device capabilities,
    etc. If the application can monitor each of those vectors, and react per user, per
    connection, per process, per routine, then you can achieve some mind blowing tricks
    to make your application really efficient, hence to make the web more efficient.
    Mojito has two unique features to empower you on this area.
</p>
<ul>
    <li>
        <em>
            Runtime context
        </em>
        : which is a predefined set of dimensions/variables with a finite number of possibilities/values
        that will define the state of the execution at any given time.
    </li>
    <li>
        <em>
            Environment agnostic
        </em>
        : the unique ability to run the same code in different runtimes. E.g.: browser,
        server, iOS UIWebView or any other phoneGap similar runtime.
    </li>
</ul>
<p>
    When you combine these two features together, you can control how, when and where
    each piece of logic will be executed, so, you can define very simple rules to make
    your application to perform better under different&nbsp;circumstances&nbsp;per user,
    per request, per&nbsp;routine, etc.
</p>
<p>
    <strong>
        What does “context” mean in Mojito?
    </strong>
</p>
<p>
    In terms of JavaScript, a context is a literal object that contains a series of
    dimensions (properties, for example, region, device,&nbsp;connection&nbsp;speed,
    network, environment, memory, just to name a few), and each dimension can have a
    finite number of values. This literal object can be constructed on every request
    at the server side, or can be defined, redefined at the client side. This literal
    object will allow you to pick up certain pre-defined configuration that can be used
    to trigger and execute a certain piece of logic, or can be used just like a dynamic
    configuration hub for regular settings, language, etc.
</p>
<p>
    This is a concept that we have been using for quite sometime at Yahoo!, but what
    is new in Mojito is that this context can now travel from server-to-client and vice
    versa, and can be modified at any given time, giving you full control over it.
</p>
<p>
    <strong>
        Can I really execute the same code in the server and in the client?
    </strong>
</p>
<p>
    Yes, you can. But it’s not magic. You have to define where you want to execute each
    piece of logic (
    <em>
        javascript files
    </em>
    ) depending of the execution context following a very simple pattern to name your
    files, e.g.:
</p>
<ul>
    <li>
        foo.client.js defines a piece of logic that is only available when running on the
        client side runtime.
    </li>
    <li>
        bar.server.js defines a piece of logic that is only available when running on the
        server side runtime.
    </li>
    <li>
        baz.common.js defines a piece of code that is runtime agnostic. In can run on either
        server or client side.
    </li>
</ul>
<p>
    Now, if you have two pieces with the same name (e.g. foo.client.js and foo.server.js),
    Mojito will switch between logics automatically depending on the execution runtime.
    This allows you to tweak your logic easily. Keep in mind that <em>.client.js or </em>.server.js
    will be able to require any other piece of logic that could be client, server or
    common. This is a very powerful way to organize your code.
</p>
<p>
    <strong>
        How does Mojito compare to other framework out there?
    </strong>
</p>
<p>
    I have used and tried many other Node.JS frameworks in the last two years or so,
    and all of them (no exceptions) suffer from the same problem, separation between
    server and client. I think Mojito does a pretty good job&nbsp;blurring&nbsp;that
    separation, and as a result, you will notice an increase on productivity from the
    development point of view.
</p>
<p>
    <strong>
        Was Mojito built from scratch in Node.JS?
    </strong>
</p>
<p>
    No. Mojito was built on top of two well known/tested frameworks:
</p>
<ul>
    <li>
        <a href="http://yuilibrary.com/" target="_blank">YUI Library</a>
        : which is the foundation of the javascript module structure and the basic abstraction
        for most of the JavaScript pieces in Mojito. You don’t need to know YUI to use Mojito
        though, Mojito obscures most of the YUI features, and you can use JavaScript or any
        other JavaScript library if you want (if it can run in the server side just like
        YUI does it).
    </li>
    <li>
        <a href="http://expressjs.com/" target="_blank">Express</a>
        : “High performance, high class web development for&nbsp;
        <a href="http://nodejs.org/">Node.js</a>
        “&nbsp;as the underlaying serving platform for the server side.
    </li>
</ul>
<p>
    They are both open source projects.
</p>
<p>
    <strong>
        How hard is to get up to speed on Mojito?
    </strong>
</p>
<p>
    To be honest, it will be hard. You need to be able to reach some level of abstraction
    to really embrace the Mojito paradigm, but also to be able to squeeze every bit of
    it. It takes time to understand how it works, and how to tweak it, but it is worth
    the effort. Especially for those who know YUI, it will be easier to adapt to Mojito.
</p>
<p>
    <strong>
        Which types of web applications are more suitable for Mojito?
    </strong>
</p>
<p>
    Most web applications that are meant to be used in different devices can probably
    fit into Mojito paradigm. But those that are set to scale in terms of traffic and
    performance are more suitable for it IMHO.
</p>
<p>
    <strong>
        What kind of cool stuff can I do with Mojito?
    </strong>
</p>
<p>
    As&nbsp;
    <a href="https://twitter.com/#!/rw0">@rw0</a>
    &nbsp;mentioned in his post, you can create an application that can easily instrument
    the latency and response time of every network activity within the app, and translate
    that in changes in a dimension within the context. Let’s say we have a dimension
    like this:
</p>
<p>
    { speed: { fast: null, regular: null, slow: null, shitty: null }&nbsp;}
</p>
<p>
    Based on the instrumentation, you can adjust the value of “speed” overtime. If the
    user is using an iPhone, connected to a wifi network, and&nbsp;suddenly&nbsp;s/he
    step out of the room, switching to a shitty 3G connection, and if we can detect that
    change, and re-asset the “speed” dimension, that means we can easily change the way
    we serve traffic/content for the user. Maybe we can now make a single request bundling
    content, assets, data into a single response (JSON), putting some&nbsp;pressure&nbsp;on
    our servers (which will do the bundling process) for that particular user in order
    to keep s/he running without a degradation of the service.
</p>
<p>
    <strong>
        What else can I do with it?
    </strong>
</p>
<p>
    Based on the previous example, what if we instrument our servers to detect changes
    in the level of CPU or memory usage?, and depending on a dimension, we can delegate
    some bundling, rendering, and fetching processes to our client’s runtime in an event
    of a traffic peak, instead of just degrading the service, or serving stale content
    just to avoid an outage. And this is only possible because of JavaScript, and the
    ability to run it in the server or client based on the execution context. I think
    this is a killer feature.
</p>
<p>
    <strong>
        Where can I host a Mojito application?
    </strong>
</p>
<p>
    A Mojito application is just a Node.JS application. Ideally, if it is set to scale,
    you should try to find an elastic cloud (maybe Amazon EC2) to host it. Internally,
    we use Yahoo! Manhattan Cloud, which is another piece of the Yahoo! Cocktails platform,
    and hopefully you will be able to use it too soon. Ask&nbsp;
    <a href="https://twitter.com/#!/olympum">@olympum</a>
    &nbsp;for more details hehehehe!
</p>
<p>
    <strong>
        Where can I download the source code?
    </strong>
</p>
<p>
    Mojito source code is hosted in&nbsp;
    <a href="http://github.com/yahoo/mojito">github.com/yahoo/mojito</a>
    , go and get it.&nbsp;We hope you can fork it and help us make it better by submitting
    patches and new features.
</p>
<p>
    <strong>
        How can I use it?
    </strong>
</p>
<p>
    Check the&nbsp;
    <a href="http://developer.yahoo.com/cocktails/mojito/docs/quickstart/">quickstart section</a>
    &nbsp;from the official page.
</p>
<p>
    That’s all for now, feel free to ask/comment!
</p>
<p>
    Here are some others links to get you running on Mojito:
</p>

<ul>
<li><a href="http://developer.yahoo.com/cocktails/mojito/">http://developer.yahoo.com/cocktails/mojito/</a></li>
<li><a href="http://github.com/yahoo/mojito">http://github.com/yahoo/mojito</a></li>
<li><a href="http://developer.yahoo.com/cocktails/mojito/api/">http://developer.yahoo.com/cocktails/mojito/api/</a></li>
<li><a href="http://yuilibrary.com/">http://yuilibrary.com/</a></li>
</ul>
]]></description>
            </item>
        
            <item>
                <title>Getting up to speed with YUI 3</title>
                <link>http://caridy.name/blog/2009/11/getting-up-to-speed-with-yui-3/</link>
                <pubDate>Mon Nov 16 2009 00:00:00 GMT-0500 (EST)</pubDate>
                <description><![CDATA[<p><p>Few folks asked me about <a href="http://developer.yahoo.com/yui/3/">YUI 3</a> and how they can get up to speed with this new version of <a href="http://developer.yahoo.com/yui/">Yahoo! User Interface Library</a>. Well, here is a quick guide to get up to speed in 3 days. Yes you heard me right, only 3 days, assuming you already know JavaScript and <a href="http://developer.yahoo.com/yui/2/">YUI 2</a>. <img src="http://caridy.name/wp-includes/images/smilies/icon_wink.gif" alt=";-)" class="wp-smiley"> </p>
</p>
<p><h3>First block (day one) – General Architecture</h3>
</p>
<p><p>In the first day, you will have to expend around 4 hours watching videos, getting a lot of information. There is not time to tackle this little by little, hahahaha.  It’s better to get the whole insight in a row.</p>
</p>
<p><p><strong>(Day 1, Task 1). General Concepts</strong></p>
</p>
<p><p style="padding-left: 30px;">Let’s start with a general talk by Nicholas. He really explores some of the basic design principles used to build YUI 3. He didn’t mention YUI 3, but I believe if you understand these general concepts, will be easy for you to understand YUI 3.</p>
</p>
<p><p style="padding-left: 30px;"><a href="http://developer.yahoo.com/yui/theater/video.php?v=zakas-architecture"><strong>Nicholas C. Zakas — Scalable JavaScript Application Architecture</strong></a><br>
Frontend architecture for complex, modular web applications with significant JavaScript elements.<br>
<a href="http://developer.yahoo.com/yui/theater/video.php?v=zakas-architecture">http://developer.yahoo.com/yui/theater/video.php?v=zakas-architecture</a>
</p>
<p><p style="padding-left: 30px;">Then you can jump for the real stuff. These 3 videos were recorded during YUI Conf 2009, and are essential in the process of understanding the underlying concepts behind YUI 3.</p>
</p>
<p><p><strong>(Day 1, Task 2). YUI Infrastructure</strong></p>
</p>
<p><p style="padding-left: 30px;"><a href="http://developer.yahoo.com/yui/theater/video.php?v=miraglia-yuiconf2009-yui3">Eric Miraglia — Welcome to YUI 3</a><br>
YUI engineer Eric Miraglia provides a high-level introduction to key concepts underlying the YUI 3 codeline.<br>
<a href="http://developer.yahoo.com/yui/theater/video.php?v=miraglia-yuiconf2009-yui3">http://developer.yahoo.com/yui/theater/video.php?v=miraglia-yuiconf2009-yui3</a>
</p>
<p><p><strong>(Day 1, Task 3). Events Infrastructure</strong></p>
</p>
<p><p style="padding-left: 30px;"><a href="http://developer.yahoo.com/yui/theater/video.php?v=smith-yuiconf2009-events">Luke Smith — Events Evolved</a><br>
YUI engineer Luke Smith provides a deep introduction to the YUI 3 event system including its support for DOM events, event delegation, synthetic events, and custom events.<br>
<a href="http://developer.yahoo.com/yui/theater/video.php?v=smith-yuiconf2009-events">http://developer.yahoo.com/yui/theater/video.php?v=smith-yuiconf2009-events</a>
</p>
<p><p><strong>(Day 1, Task 4). Widget Infrastructure<br>
</strong></p>
</p>
<p><p style="padding-left: 30px;"><strong> </strong> <a href="http://developer.yahoo.com/yui/theater/video.php?v=desai-yuiconf2009-widgets">Satyen Desai — A Widget Walkthrough</a><br>
YUI engineer Satyen Desai provides a detailed tour of the YUI 3 widget subsystem. (Slides).<br>
<a href="http://developer.yahoo.com/yui/theater/video.php?v=desai-yuiconf2009-widgets">http://developer.yahoo.com/yui/theater/video.php?v=desai-yuiconf2009-widgets</a>
</p>
<p><h3>Second Block (day two) – Experimenting</h3>
</p>
<p><p>In this second block you will be able to get some insight, checking some real examples, and getting some feeling about the new code style and the new infrastructure.</p>
</p>
<p><p><strong><strong>(Day 2, Task 1). </strong>Playing with the Official Examples</strong></p>
</p>
<p><p style="padding-left: 30px;">You should spend some time checking some of these examples. Keep in mind that for every example in the library we have a page with the full explanation, this can help you to understand better how things work. Here is an <a href="http://developer.yahoo.com/yui/3/examples/anim/basic.html">example</a>, and has you can see, there is a link to display the <a href="http://developer.yahoo.com/yui/3/examples/anim/basic_clean.html">working example</a> in a new page, or you can see it within the iframe and the description is below that.</p>
</p>
<p><p style="padding-left: 30px;"><a href="http://developer.yahoo.com/yui/3/examples/">YUI 3: Index of Examples</a><br>
YUI 3 ships with a series of 130 examples that illustrate the implementation of its components. The examples can be starting points for your exploration, code snippets to jump-start your own programming, or simply inspiration as to how various interaction patterns can be enabled in the web browser via YUI.<br>
<a href="http://developer.yahoo.com/yui/3/examples/">http://developer.yahoo.com/yui/3/examples/</a>
</p>
<p><p><strong><strong>(Day 2, Task 2). </strong>Checking the state of the library<br>
</strong></p>
</p>
<p><p style="padding-left: 30px;">It’s important to understand the state of the library, the list of available modules, and the state of each module. Keep in mind that every module contains a landing page with some information (the most important), but there are some more pages and the API Docs with tons of valuable info. Don’t spend too much time digging from here, it’s better to explore each component when needed, having a real use-case in mind.
<a href="http://developer.yahoo.com/yui/3/">http://developer.yahoo.com/yui/3/</a>
</p>
<p><p style="padding-left: 30px;">Try to focus on “Core” and “Component Infrastructure” sections. Also, spend some time reviewing the <a href="http://developer.yahoo.com/yui/3/configurator/">dependency configurator</a> tool, it will give you some feeling about the granularity and the organization.<br>
<a href="http://developer.yahoo.com/yui/3/configurator/">http://developer.yahoo.com/yui/3/configurator/</a>
</p>
<p><p><strong>(Day 2, Task 3). Debugging</strong></p>
</p>
<p><p style="padding-left: 30px;">Now that you have nailed down some of the general concepts, and you will start checking some examples and putting some examples on your own, it’s important to know how the debug your code. YUI 3 offers a variety of tools and utilities to help you during the development process:</p>
</p>
<p><p style="padding-left: 30px;"><a href="http://developer.yahoo.com/yui/theater/video.php?v=smith-yuiconf2009-debugging">Luke Smith — Debugging in YUI 3</a><br>
YUI engineer Luke Smith discusses the fine art of debugging web applications, looking at general tools and techniques and providing a few specific hints about debugging in YUI 3.<br>
<a href="http://developer.yahoo.com/yui/theater/video.php?v=smith-yuiconf2009-debugging">http://developer.yahoo.com/yui/theater/video.php?v=smith-yuiconf2009-debugging</a>
</p>
<p><p><strong>(Day 2, Task 4). Performance Implications</strong></p>
</p>
<p><p style="padding-left: 30px;">With YUI 3 we are trying to beat all the barriers in terms of performance. Normally is not recommended to introduce performance optimization in the early stages for a project, it’s important to know the general concepts behind YUI 3 Loading process, and how to leverage YUI 3 infrastructure to create hight performance web applications.</p>
</p>
<p><p style="padding-left: 30px;"><a href="http://developer.yahoo.com/yui/theater/video.php?v=sweeney-yuiconf2009-performance">Matt Sweeney — YUI 3 Performance</a><br>
YUI architect Matt Sweeney reviews principles of high-performance web development and looks at how best to implement those principles in YUI 3-based projects.<br>
<a href="http://developer.yahoo.com/yui/theater/video.php?v=sweeney-yuiconf2009-performance">http://developer.yahoo.com/yui/theater/video.php?v=sweeney-yuiconf2009-performance</a>
</p>
<p><p>After that, you should be able to continue with the library documentation and the examples.</p>
</p>
<p><h3>Third Block (day three) –  Extending and Contributing</h3>
</p>
<p><p><strong>(Day 3, Task 1). Creating your own modules</strong></p>
</p>
<p><p style="padding-left: 30px;"><a href="http://www.slideshare.net/caridy/building-yui-3-custom-modules">Caridy Patino – Building YUI 3 Custom Modules</a><br>
Learn how to leverage the YUI 3.x infrastructure to create custom code that can be loaded easily and efficiently onto any page. Also discover how these mashups can combine YUI widgets and utilities with your own code and how to reuse code between different YUI instances.<br>
<a href="http://www.slideshare.net/caridy/building-yui-3-custom-modules">http://www.slideshare.net/caridy/building-yui-3-custom-modules</a>
</p>
<p><p><strong>(Day 3, Task 2). A real world use-case</strong></p>
</p>
<p><p style="padding-left: 30px;">In every project, is always good to get a different angle, a different perspective, and outsider insight:</p>
</p>
<p><p style="padding-left: 30px;"><a href="http://developer.yahoo.com/yui/theater/video.php?v=ericf-yuiconf2009-webapps">Eric Ferraiuolo — Web App Development with YUI 3</a><br>
Eric Ferraiuolo of Oddnut Software talks about the nuances of deploying real-world web applications using YUI 3.<br>
<a href="http://developer.yahoo.com/yui/theater/video.php?v=ericf-yuiconf2009-webapps">http://developer.yahoo.com/yui/theater/video.php?v=ericf-yuiconf2009-webapps</a>
</p>
<p><p><strong>(Day 3, Task 3). How to contributing to YUI</strong></p>
</p>
<p><p style="padding-left: 30px;">If you’re really into YUI, you should take the time to check this awesome video from Dav Glass:</p>
</p>
<p><p style="padding-left: 30px;"><a href="http://developer.yahoo.com/yui/theater/video.php?v=glass-yuiconf2009-contributing">Dav Glass — Contributing to YUI</a><br>
YUI engineer Dav Glass introduces you to the YUI Gallery and steps through the process of making contributions to the YUI project.<br>
<a href="http://developer.yahoo.com/yui/theater/video.php?v=glass-yuiconf2009-contributing">http://developer.yahoo.com/yui/theater/video.php?v=glass-yuiconf2009-contributing</a>
</p>
<p><p style="padding-left: 30px;">Check the YUI 3 gallery here:<br>
<a href="http://yuilibrary.com/gallery/">http://yuilibrary.com/gallery/</a>
</p>
<p><h3>Few more thoughts</h3>
</p>
<p><p>There is a bunch of videos in the <a href="http://developer.yahoo.com/yui/theater/">YUI Theater</a>, make sure that you check them, some of them are really useful, other are very technical or diving into an specific subject. Also, there are a bunch of them explaining in details some of the tools created by YUI Team as well.<br>
<a href="http://developer.yahoo.com/yui/theater/">http://developer.yahoo.com/yui/theater/</a>
</p>
<p><p>YUI Blog is another good reason to keep you updated about the library. Including some good articles (again, some technical deep dive).<br>
<a href="http://www.yuiblog.com/">http://www.yuiblog.com/</a>
</p>
<p><p>And finally, you can join us thru the community. <a href="http://yuilibrary.com/">This site</a>, with such a great organization, provides multiple ways to get in contact with YUI Core Team, YUI Contributors and the community in general.<br>
<a href="http://yuilibrary.com/">http://yuilibrary.com/</a></p>
]]></description>
            </item>
        
            <item>
                <title>Bootstrap using “YUI Loader” and “YUI Get Utility”</title>
                <link>http://caridy.name/blog/2009/05/bootstrap-using-yui-loader-and-yui-get-utility/</link>
                <pubDate>Thu May 07 2009 00:00:00 GMT-0400 (EDT)</pubDate>
                <description><![CDATA[<p>Everyday more and more developers use on-demand loading to improve performance and round “trip” times for web applications and even for traditional web pages that require a certain amount of JavaScript code.</p>
<p>In YUI 2.x, we have two components that can help us to define on-demand rules. These are the <a href="http://developer.yahoo.com/yui/get/">YUI Get Utility</a>, and the <a href="http://developer.yahoo.com/yui/yuiloader/">YUI Loader</a>.</p>
<p>YUI 3.x is a different story, this new version is based on the on-demand philosophy, and because of that, Loader and Get Utility are part of YUI Core.</p>
<h3>About this article:</h3>
<p>In this article, I will focus on <a href="http://developer.yahoo.com/yui/">YUI 2.x</a> and specifically, how you can design your application to use the <em>YUI on-demand capabilities</em> in such a way that the transition to <a href="http://developer.yahoo.com/yui/3/">YUI 3.x</a> will be straightforward. The main goal is to describe how we can use YUI to organize the code and learn how to deal with <em>on-demand loading processes</em> rather than focus on performance improvements. If you are looking for a performance boost, certainly this technique can help, but I will recommend you to follow the links provided at the bottom of this article.</p>
<p>From my point of view, there are two different types of web applications or pages:</p>
<ul>
<li><em>Monolithic Applications</em>:<br>
The application and all its features/behaviors are controlled by a single object/script. Modifications in the application usually impact the core and the application in general.</li>
<li><em>Granular Applications</em>:<br>
The application is based on regions/webparts that represent certain areas. Usually some of these regions/webparts can be switched or removed from the application without impacting the rest of the functionalities.</li>
</ul>
<p>I believe the second option (granular applications) is the way to go, especially for more complex applications. Also, this option will most likely make use of on-demand loading, where each region/webpart should be able to load its requirements and execute its own initialization process when it’s requirements become active and it’s DOM structure becomes available in the DOM.</p>
<p>Note: <em>regions/webparts are atomic units used to build each page. Usually they are represented in the DOM as a simple DIV, and are contained as a granular part in the application. From now on, I will refer to these elements as “regions”.</em></p>
<p>That said, lets see a couple of diagrams to analyze what is the gain behind the on-demand loading process. These are manually created diagrams representing the loading and execution process for a page.</p>
<h3>Application timeline:</h3>
<p>These two diagrams represent a page/app in which, for the sake of example,  contain only two regions (left-column-renderer and ad-renderer).</p>
<p><strong>Traditional process</strong>: inserting tags within default DOM structure of every page.</p>
<div class="wp-caption aligncenter" style="width: 615px"><img title="Default Browser Loader: Loading and Execution Timeline" src="http://caridy.name/imgs/browser-timeline.jpg" alt="Default Browser Loader: Loading and Execution Timeline" width="605" height="321"><p class="wp-caption-text">Default Browser Loader: Loading and Execution Timeline</p></div>
<p><em>Notes for this diagram</em>:</p>
<ul>
<li>it represents a generic app timeline for a simple page with a bunch of script tags.</li>
<li>the scripts can be at the top (in the head) or at the bottom of the page (before &lt;/body&gt;), and the sequence is more or less the same.</li>
<li>“<a title="YUI Modules" href="http://developer.yahoo.com/yui/yuiloader/#modulenames">yui-modules</a>” represent a set of YUI modules (probably using <a title="YUI Combo Handler" href="http://yuiblog.com/blog/2008/07/16/combohandler/">YUI Combo Handler</a> to include them all using  a single call.</li>
<li>“<a title="Bubbling Library YUI Extension" href="http://bubbling-library.com">bubbling</a>” is a 3rd party module that cannot be loaded thru the YUI Combo Handler.</li>
<li>“swf-object” is a well-known 3rd party component to handle flash movies, and it represents another requirement.</li>
<li>“<em>…other…</em>” represents other regions in the application.</li>
</ul>
<p><strong>On-demand loading process</strong>: using YUI Loader to load the requirements and YUI Get Utility to execute the initialization processes for each region.</p>
<div class="wp-caption aligncenter" style="width: 610px"><img title="YUI Loader and Get Utility: Loading and Execution Timeline" src="http://caridy.name/imgs/yui-loader-timeline.jpg" alt="Loading and Execution Timeline" width="600" height="400"><p class="wp-caption-text">YUI Loader and Get Utility: Loading and Execution Timeline</p></div>
<p><em>Notes for this diagram</em>:</p>
<ul>
<li>we use some of the elements described in the previous one.</li>
<li>“yui-loader” is a small file (only 9.4KB) and it packages <a href="http://developer.yahoo.com/yui/yahoo/">Yahoo Global Object</a>, <a href="http://developer.yahoo.com/yui/get/">Get Utility</a>, and <a href="http://developer.yahoo.com/yui/yuiloader/">YUI Loader</a> engine.</li>
<li>“boot” is usually a tiny file with the application logic, the definition of the 3rd party modules (swf-object and bubbling), and the list of other dependencies (initializers and renderers) that should be loaded thru YUI Get Utility (like left-column-renderer, ad-renderer, etc).</li>
<li>items at the same level can be executed at the same time (JavaScript is a single execution thread, and so, the first to become ready will be the first to be executed).</li>
<li>swf-object was transformed into a YUI Module to fit this example (it can be also be treated as a component if you want to).</li>
<li>items in the 3rd block (left-column-renderer, ad-renderer, etc) will be included dynamically by the bootstrap definition.</li>
</ul>
<p><strong>Lets try to identify differences between these two approaches:</strong></p>
<p>The first difference that you may notice in these two diagrams is the “domready” event. It will be more likely to arrive first in the second approach because those scripts will be injected on-demand without blocking the loading process. It could arrive even before the “bootstrap ready” mark, depending on the complexity (size) of the DOM structure.</p>
<p>In theory, the bootstrap is responsible in defining what should be loaded and executed after the “bootstrap ready” moment occurs. This means that we can control everything at the JS level instead of depending on the default DOM structure. So all the logic will be at the JS layer and we should be able to delay certain initialization processes, or switch between them based on the user preferences, etc. All this <em>granularity</em> will be handled at the JS level.</p>
<h3>Lets see some code:</h3>
<p><em>Entry Point (index.html):</em></p>
<div class="wp_syntax">
<div class="code">
<pre style="font-family: monospace;">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;
 &quot;<a href="http://www.w3.org/TR/html4/strict.dtd&quot;&amp;gt">http://www.w3.org/TR/html4/strict.dtd&quot;&amp;gt</a>;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Bootstrapping for a Web App using YUI 2.x&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;bootstrap.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body class=&quot;yui-skin-sam&quot;&gt;
    &lt;p&gt;Web App.&lt;/p&gt;
    &lt;div id=&quot;mod-left-column&quot;&gt;
      ...
    &lt;/div&gt;
    &lt;div id=&quot;mod-content&quot;&gt;
      ...
    &lt;/div&gt;
    &lt;div id=&quot;mod-ads&quot;&gt;
      ...
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
</div>
</div>
<p><em>Bootstrap script (bootstrap.js):</em></p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #006600; font-style: italic;">/<em>
 </em> Encapsulation Pattern: Conjuring YUI from thin air (by Chris Heilmann)
 <em> <a href="http://www.wait-till-i.com/2008/08/02/conjuring-yui-from-thin-air/">http://www.wait-till-i.com/2008/08/02/conjuring-yui-from-thin-air/</a>
 </em>/</span>
YAHOO_config <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
    <span style="color: #009966; font-style: italic;">/<em> injecting the YUI Loader in the current page </em>/</span>
    <span style="color: #003366; font-weight: bold;">var</span> s <span style="color: #339933;">=</span> document.<span style="color: #660066;">createElement</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;script&#39;</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
    s.<span style="color: #660066;">setAttribute</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;type&#39;</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&#39;text/javascript&#39;</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
    s.<span style="color: #660066;">setAttribute</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;src&#39;</span><span style="color: #339933;">,</span>
        <span style="color: #3366CC;">&#39;<a href="http://yui.yahooapis.com/2.7.0/build/yuiloader/yuiloader-min.js&#39;&lt;/span&gt;&lt;span">http://yui.yahooapis.com/2.7.0/build/yuiloader/yuiloader-min.js&#39;&lt;/span&gt;&lt;span</a> style=&quot;color: #009900;&quot;&gt;)</span><span style="color: #339933;">;</span>
    document.<span style="color: #660066;">getElementsByTagName</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;head&#39;</span><span style="color: #009900;">)</span><span style="color: #009900;">[</span><span style="color: #CC0000;">0</span><span style="color: #009900;">]</span>.<span style="color: #660066;">appendChild</span><span style="color: #009900;">(</span>s<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
    <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #009900;">{</span>
        <span style="color: #006600; font-style: italic;">// true if the library should be dynamically loaded after window.onload.</span>
        injecting<span style="color: #339933;">:</span> <span style="color: #003366; font-weight: bold;">true</span><span style="color: #339933;">,</span>
        listener<span style="color: #339933;">:</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span>o<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
            <span style="color: #006600; font-style: italic;">// waiting for the loader component</span>
            <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">(</span>o.<span style="color: #000066;">name</span> <span style="color: #339933;">===</span> <span style="color: #3366CC;">&#39;get&#39;</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
                window.<span style="color: #660066;">setTimeout</span><span style="color: #009900;">(</span>YAHOO_config.<span style="color: #660066;">ready</span><span style="color: #339933;">,</span> <span style="color: #CC0000;">1</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
            <span style="color: #009900;">}</span>
        <span style="color: #009900;">}</span><span style="color: #339933;">,</span>
        ready<span style="color: #339933;">:</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
            <span style="color: #003366; font-weight: bold;">var</span> loader <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">new</span> YAHOO.<span style="color: #660066;">util</span>.<span style="color: #660066;">YUILoader</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
            <span style="color: #006600; font-style: italic;">// defining custom modules</span>
            loader.<span style="color: #660066;">addModule</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
                <span style="color: #000066;">name</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&#39;bubbling&#39;</span><span style="color: #339933;">,</span>
                type<span style="color: #339933;">:</span> <span style="color: #3366CC;">&#39;js&#39;</span><span style="color: #339933;">,</span>
                fullpath<span style="color: #339933;">:</span> <span style="color: #3366CC;">&#39;bubbling/bubbling.js&#39;</span><span style="color: #339933;">,</span>
                requires<span style="color: #339933;">:</span> <span style="color: #009900;">[</span><span style="color: #3366CC;">&#39;yahoo&#39;</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&#39;event&#39;</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&#39;dom&#39;</span><span style="color: #009900;">]</span>
            <span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
            loader.<span style="color: #660066;">addModule</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
                <span style="color: #000066;">name</span><span style="color: #339933;">:</span> <span style="color: #3366CC;">&#39;swfobject&#39;</span><span style="color: #339933;">,</span>
                type<span style="color: #339933;">:</span> <span style="color: #3366CC;">&#39;js&#39;</span><span style="color: #339933;">,</span>
                fullpath<span style="color: #339933;">:</span> <span style="color: #3366CC;">&#39;tools/swf-object.js&#39;</span>
            <span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
            loader.<span style="color: #660066;">require</span><span style="color: #009900;">(</span><span style="color: #009900;">[</span><span style="color: #3366CC;">&#39;bubbling&#39;</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&#39;swfobject&#39;</span><span style="color: #009900;">]</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
            loader.<span style="color: #660066;">combine</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">true</span><span style="color: #339933;">;</span>
            loader.<span style="color: #660066;">insert</span><span style="color: #009900;">(</span><span style="color: #009900;">{</span>
                onSuccess<span style="color: #339933;">:</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
                    <span style="color: #009966; font-style: italic;">/<em> initializers and renderers here </em>/</span>
                    YAHOO.<span style="color: #660066;">util</span>.<span style="color: #660066;">Get</span>.<span style="color: #660066;">script</span><span style="color: #009900;">(</span><span style="color: #009900;">[</span>
                        <span style="color: #3366CC;">&quot;left-column-renderer.js&quot;</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&quot;ad-renderer.js&quot;</span>
                    <span style="color: #009900;">]</span><span style="color: #339933;">,</span> <span style="color: #009900;">{</span>
                        onSuccess<span style="color: #339933;">:</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
                            <span style="color: #006600; font-style: italic;">/<em> we are ready to roll, now we can
                               do more initializations here </em>/</span>
                        <span style="color: #009900;">}</span>
                    <span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
                    <span style="color: #006600; font-style: italic;">/<em> more initializations here, if
                       you don&#39;t want to use Get Utility </em>/</span>
                <span style="color: #009900;">}</span>
            <span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
        <span style="color: #009900;">}</span>
    <span style="color: #009900;">}</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span> <span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre></div></div>

<p>The developer should define the generic structure for the application within the bootstrap, specifying the requirements, components, and modules for the application. So, basically, the bootstrap would be different for each site, application (or even for page).</p>
<h3>Identify what should be loaded using YUI Loader or YUI Get Utility:</h3>
<p>The difference between the modules and components/initializers/renderers is that modules are structures based on YUI, with the corresponding registration process, and the components are simple JS files.</p>
<p>All <a href="http://developer.yahoo.com/yui/yuiloader/#modulenames">YUI components/utilities/widgets</a> (modules) should be loaded thru the YUI Loader (along with 3rd party modules), and will be loaded on the page once.</p>
<p>YUI Get Utility should load scripts that implement a certain initialization/renderer process for a region in your application, or some kind of delayed routine to enhance the page.</p>
<h3><strong>Initialization and renderer processes:</strong></h3>
<p>Loader’s “onSuccess” is the first stop in the loading process (“bootstrap ready” in the diagram). At this point we can decide if we want to put all the initialization process within that function, or if we want to load some JavaScript files, and they will carry on with the initialization process for each different region in the page, getting some granularity for each page.</p>
<p>The initialization/renderer process should wait until the DOM structure that represent the region that we want to enhance gets available (<a href="http://developer.yahoo.com/yui/event/#onavailable">onAvailable or onContentReady</a>). If we want to extend/expand that DOM structure, just wait until DOM gets ready (<a href="http://developer.yahoo.com/yui/event/#ondomready">onDOMReady</a>) to avoid malfunctions in IE. Here is an example:</p>
<p><em>Left Column Renderer (mod-left-column.js)</em>:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">YAHOO.<span style="color: #660066;">util</span>.<span style="color: #660066;">Event</span>.<span style="color: #660066;">onAvailable</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;mod-left-column&#39;</span><span style="color: #339933;">,</span> <span style="color: #003366; font-weight: bold;">function</span> <span style="color: #009900;">(</span>el<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
  <span style="color: #009966; font-style: italic;">/<em> initialization process here </em>/</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre></div></div>

<p>In this case, we should include all the requirements before this block is executed.</p>
<p>In YUI 3.x, things are a lot easier. For example:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">YUI<span style="color: #009900;">(</span><span style="color: #009900;">{</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span>.<span style="color: #003366; font-weight: bold;">use</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;node&#39;</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&#39;json&#39;</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&#39;io&#39;</span><span style="color: #339933;">,</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span>Y<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
  <span style="color: #003366; font-weight: bold;">var</span> node <span style="color: #339933;">=</span> Y.<span style="color: #660066;">get</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;#mod-left-column&#39;</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
  <span style="color: #009966; font-style: italic;">/<em> initialization process here </em>/</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre></div></div>

<p><p>Instead of including all the necessary requirements (modules) at the bootstrap level, YUI 3.x Loader will do it automatically during each region’s initialization process</p>
</p>
<p><h3><strong>Real examples:</strong></h3>
</p>
<ul>
<li>Simple implementation of the above example:<br>
<a href="http://bubbling-library.com/sandbox/yui2/bootstrap/index.html">http://bubbling-library.com/sandbox/yui2/bootstrap/index.html</a>
</li>
<li>Simple implementation (experimental) on top of YUI 3 PR1:<br>
<a href="http://bubbling-library.com/sandbox/yui3/bootstrap/index.html">http://bubbling-library.com/sandbox/yui3/bootstrap/index.html</a>
</li>
</ul>
<h3>Final notes:</h3>
<ul>
<li>The loader object can be used at any time, even during a region initialization part. It’s a good practice in YUI 2.x to have a single  reference for the loader. With small changes in the code, we can easily share and re-use the “loader” object thru “<em><a href="http://developer.yahoo.com/yui/yahoo/#config">YAHOO_config</a>.loader</em>“, across the application.</li>
<li>CSS files can be loaded thru YUI Loader or YUI Get Utility in the same way as JavaScript files.</li>
<li>For production, it’s a good practice to minimize the number of request (JavaScript files). In this case you can combine all the 3rd party modules in a single file, and even combine all the components/initializers/renderers in a single file.</li>
<li>Using inline JavaScript blocks to initialize some of the regions is not a good option; they <a title="Positioning Inline Scripts by Steve Souders" href="http://www.stevesouders.com/blog/2009/05/06/positioning-inline-scripts/">block the rendering of everything in the page</a>.</li>
</ul>
<h3><strong>More Information:</strong></h3>
<p>There are a lot of good articles about on-demand loading and how it helps to improve the performance, as well as its implications. Here are some of them:</p>
<ul>
<li>Conjuring YUI from thin air <em>by <span class="fn">Christian Heilmann</span></em><br>
<a href="http://www.wait-till-i.com/2008/08/02/conjuring-yui-from-thin-air/">http://www.wait-till-i.com/2008/08/02/conjuring-yui-from-thin-air/</a>
</li>
<li>YUI Loader with Combo Handler <em>by Eric Miraglia</em><br>
<a href="http://yuiblog.com/blog/2008/10/17/loading-yui/">http://yuiblog.com/blog/2008/10/17/loading-yui/</a>
</li>
<li>Loading Scripts Without Blocking <em>by Steve Souders</em><br>
<a href="http://www.stevesouders.com/blog/2009/04/27/loading-scripts-without-blocking">http://www.stevesouders.com/blog/2009/04/27/loading-scripts-without-blocking</a>
</li>
<li>Positioning Inline Scripts <em>by Steve Souders</em><br>
<a href="http://www.stevesouders.com/blog/2009/05/06/positioning-inline-scripts/">http://www.stevesouders.com/blog/2009/05/06/positioning-inline-scripts/</a>
</li>
</ul>]]></description>
            </item>
        
            <item>
                <title>YUI3: Controlling key strokes events (keyup, keydown, keypress)</title>
                <link>http://caridy.name/blog/2009/03/yui3-keystroke-events/</link>
                <pubDate>Fri Mar 20 2009 00:00:00 GMT-0400 (EDT)</pubDate>
                <description><![CDATA[<p>In this post I want to cover the general specifications related with keystrokes in YUI3. Basically you will see few examples and a bunch of links to the <a title="YUI3 Official Documentation" href="http://developer.yahoo.com/yui/3/">YUI Library official documentation</a>.</p>
<p><strong>There are two different ways to define a keylistener in <a title="YUI Library Official Website" href="http://yuilibrary.com/projects/yui3/wiki">YUI3</a>:</strong></p>
<p>Considering that in YUI3 most of the DOM references are YUI Node objects, using the ‘on’ method for a node object is the most reasonable approach for all kind of listeners, including keylistener.</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">YUI<span style="color: #009900;">(</span><span style="color: #009900;">)</span>.<span style="color: #003366; font-weight: bold;">use</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&quot;node&quot;</span><span style="color: #339933;">,</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span>Y<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
    Y.<span style="color: #660066;">get</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;#my-input-element&#39;</span><span style="color: #009900;">)</span>.<span style="color: #660066;">on</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&quot;keypress&quot;</span><span style="color: #339933;">,</span>  <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span>e<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
        console.<span style="color: #660066;">log</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;keypress when the focus is on the input element&#39;</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre></div></div>

<p>We can use ‘keydown’ or ‘keyup’ to be more specific in the definition.</p>
<a href="http://developer.yahoo.com/yui/3/api/Node.html#method_on">http://developer.yahoo.com/yui/3/api/Node.html#method_on</a>
<p>Also, we can use the traditional way:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">YUI<span style="color: #009900;">(</span><span style="color: #009900;">)</span>.<span style="color: #003366; font-weight: bold;">use</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&quot;*&quot;</span><span style="color: #339933;">,</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span>Y<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
    Y.<span style="color: #660066;">on</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;keydown&#39;</span><span style="color: #339933;">,</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span>e<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
        console.<span style="color: #660066;">log</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;keydown when the focus is on the input element&#39;</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">}</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&#39;#my-input-element&#39;</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre></div></div>

<p>or we can use the event name ‘key’ and using the 4th argument to be more specific in the event definition, check this example:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">YUI<span style="color: #009900;">(</span><span style="color: #009900;">)</span>.<span style="color: #003366; font-weight: bold;">use</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&quot;*&quot;</span><span style="color: #339933;">,</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span>Y<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
    Y.<span style="color: #660066;">on</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;key&#39;</span><span style="color: #339933;">,</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span>e<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
        console.<span style="color: #660066;">log</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;keydown when the focus is on the input element&#39;</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">}</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&#39;#my-input-element&#39;</span><span style="color: #339933;">,</span>  <span style="color: #3366CC;">&#39;down&#39;</span><span style="color: #339933;">,</span> Y<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre></div></div>

<p><a href="http://developer.yahoo.com/yui/3/api/YUI.html#method_on">http://developer.yahoo.com/yui/3/api/YUI.html#method_on</a>
</p>
<p>We can also use [press] or [up], or we can be even more specific describing which key combination we want to listen for, like this combination: [press:65,66+shift+ctrl], this event definition will fire only if keyCode 65 or 66 is detected during a keypress event while shift and control are held down.</p>
<p>Check this advanced example:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">YUI<span style="color: #009900;">(</span><span style="color: #009900;">)</span>.<span style="color: #003366; font-weight: bold;">use</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&quot;*&quot;</span><span style="color: #339933;">,</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span>Y<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
    Y.<span style="color: #660066;">on</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;key&#39;</span><span style="color: #339933;">,</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span>e<span style="color: #339933;">,</span> myInt<span style="color: #339933;">,</span> myString<span style="color: #339933;">,</span> myArray<span style="color: #339933;">,</span> myObj<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
        console.<span style="color: #660066;">log</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;keydown when the focus is on the input element&#39;</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">}</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&#39;#my-input-element&#39;</span><span style="color: #339933;">,</span>  <span style="color: #3366CC;">&#39;down:65,12,13+shift&#39;</span><span style="color: #339933;">,</span> Y<span style="color: #339933;">,</span> <span style="color: #CC0000;">1</span><span style="color: #339933;">,</span> <span style="color: #3366CC;">&#39;2&#39;</span><span style="color: #339933;">,</span> <span style="color: #009900;">[</span><span style="color: #CC0000;">3</span><span style="color: #009900;">]</span><span style="color: #339933;">,</span> <span style="color: #009900;">{</span>indx<span style="color: #339933;">:</span><span style="color: #CC0000;">4</span><span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre></div></div>

<p>In this example, we have a definition for keydown for keyCodes 65, 12 or 13, plus the shift key held down at the same time. The 5th argument represents the execution context (Y), and the rest of the arguments will be passed thru the handler method. More information about this feature here:</p>
<a href="http://developer.yahoo.com/yui/3/event/#keylistener">http://developer.yahoo.com/yui/3/event/#keylistener</a>
<p>Of course, we can add this kind of event to any DOM element/tag, but it only makes sense if the event can get the focus, usually all kind of form input fields, anchors, images, buttons, etc.</p>
<p><strong>Controlling the event propagation and the default behavior:</strong></p>
<p>YUI3 controls all the events in the same way, wrapping the event object (variable ‘e’ passed thru the handler function) into a more consistent object. This feature allows us to control the object propagation easily. We can use preventDefault and stopPropagation directly, instead of invoking YAHOO.util.Event.stopPropagation or YAHOO.util.Event.preventDefault as we used to do in YUI2.x. Here is a very simple example:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">YUI<span style="color: #009900;">(</span><span style="color: #009900;">)</span>.<span style="color: #003366; font-weight: bold;">use</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&quot;node&quot;</span><span style="color: #339933;">,</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span>Y<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
    Y.<span style="color: #660066;">get</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;#my-input-element&#39;</span><span style="color: #009900;">)</span>.<span style="color: #660066;">on</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&quot;keyup&quot;</span><span style="color: #339933;">,</span>  <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span>e<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
        e.<span style="color: #660066;">preventDefault</span><span style="color: #009900;">(</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
        console.<span style="color: #660066;">log</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;the input element never receives this event.&#39;</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre></div></div>

<p><a href="http://developer.yahoo.com/yui/3/api/Event.Facade.html#method_preventDefault">http://developer.yahoo.com/yui/3/api/Event.Facade.html#method_preventDefault</a>
</p>
<p><strong>Global keystroke events:</strong></p>
<p>We can also listen for global events. Defining a listener for an especial element called ‘document‘, we will receive a notification for every keystroke.</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">YUI<span style="color: #009900;">(</span><span style="color: #009900;">)</span>.<span style="color: #003366; font-weight: bold;">use</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&quot;node&quot;</span><span style="color: #339933;">,</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span>Y<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
    Y.<span style="color: #660066;">get</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;document&#39;</span><span style="color: #009900;">)</span>.<span style="color: #660066;">on</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&quot;keyup&quot;</span><span style="color: #339933;">,</span>  <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span>e<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
        console.<span style="color: #660066;">log</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&#39;global keyup&#39;</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre></div></div>

<p><a href="http://developer.yahoo.com/yui/3/api/Node.html#method_Y.get">http://developer.yahoo.com/yui/3/api/Node.html#method_Y.get</a>
</p>
<p><strong>Simulating keystroke events:</strong></p>
<p>Another feature, and this one is new in YUI3, is the event simulation, which means you can simulate user actions like clicks and keystrokes. I hope you don’t need to use it, because I really think that with a good design you don’t need to use this feature other than in a js unit test, but just in case, here is an example:</p>

<div class="wp_syntax"><div class="code"><pre class="javascript" style="font-family:monospace;">YUI<span style="color: #009900;">(</span><span style="color: #009900;">)</span>.<span style="color: #003366; font-weight: bold;">use</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&quot;event-simulate&quot;</span><span style="color: #339933;">,</span> <span style="color: #003366; font-weight: bold;">function</span><span style="color: #009900;">(</span>Y<span style="color: #009900;">)</span> <span style="color: #009900;">{</span>
    <span style="color: #003366; font-weight: bold;">var</span> element <span style="color: #339933;">=</span> document.<span style="color: #660066;">getElementById</span><span style="color: #009900;">(</span><span style="color: #3366CC;">&quot;custom-input-element&quot;</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
    <span style="color: #006600; font-style: italic;">//simulate a keystroke with Ctrl key down</span>
    Y.<span style="color: #660066;">Event</span>.<span style="color: #660066;">simulate</span><span style="color: #009900;">(</span>element<span style="color: #339933;">,</span> <span style="color: #3366CC;">&quot;keyup&quot;</span><span style="color: #339933;">,</span> <span style="color: #009900;">{</span> keyCode<span style="color: #339933;">:</span> <span style="color: #CC0000;">65</span><span style="color: #339933;">,</span> ctrlKey<span style="color: #339933;">:</span> <span style="color: #003366; font-weight: bold;">true</span> <span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>
<span style="color: #009900;">}</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre></div></div>

<p><a href="http://developer.yahoo.com/yui/3/api/Event.html#method_simulate">http://developer.yahoo.com/yui/3/api/Event.html#method_simulate</a>
</p>
<p><strong>Examples:</strong></p>
<p><a title="YUI3 Key listeners - example" href="http://bubbling-library.com/sandbox/yui3/keystrokes.html">Click here to see a very simple sample of how to use all these concepts.</a></p>
<p><em><small>One final note: some of these concepts can change in the future (examples based on YUI3 PR2).</small></em></p>
]]></description>
            </item>
        
    </channel>
</rss>
