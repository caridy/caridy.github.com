{"majorversion": 3, "filemap": {"gallery-node-accordion.js": {"classlist": ["Y.Plugin.NodeAccordion"], "name": "gallery-node-accordion.js", "module": "gallery-node-accordion"}}, "modules": {"gallery-node-accordion": {"description": "<p>The Accordion Node Plugin makes it easy to transform existing \nmarkup into an accordion element with expandable and collapsable elements, \nelements are  easy to customize, and only require a small set of dependencies.</p>\n<p>To use the Accordion Node Plugin, simply pass a reference to the plugin to a \nNode instance's <code>plug</code> method.</p>\n<p>\n<code>\n&#60;script type=\"text/javascript\"&#62; <br>\n<br>\n//  Call the \"use\" method, passing in \"gallery-node-accordion\".  This will <br>\n//  load the script and CSS for the Accordion Node Plugin and all of <br>\n//  the required dependencies. <br>\n<br>\nYUI().use(\"gallery-node-accordion\", function(Y) { <br>\n<br>\n//  Use the \"contentready\" event to initialize the accordion when <br>\n//  the element that represente the accordion <br>\n//  (&#60;div id=\"accordion-1\"&#62;) is ready to be scripted. <br>\n<br>\nY.on(\"contentready\", function () { <br>\n<br>\n//  The scope of the callback will be a Node instance <br>\n//  representing the accordion (&#60;div id=\"accordion-1\"&#62;). <br>\n//  Therefore, since \"this\" represents a Node instance, it <br>\n//  is possible to just call \"this.plug\" passing in a <br>\n//  reference to the Accordion Node Plugin. <br>\n<br>\nthis.plug(Y.Plugin.NodeAccordion); <br>\n<br>\n}, \"#accordion-1\"); <br>\n<br>      \n}); <br>\n<br>  \n&#60;/script&#62; <br>\n</code>\n</p>\n<p>The Accordion Node Plugin has several configuration properties that can be \nset via an object literal that is passed as a second argument to a Node \ninstance's <code>plug</code> method.\n</p>\n<p>\n<code>\n&#60;script type=\"text/javascript\"&#62; <br>\n<br>\n//  Call the \"use\" method, passing in \"gallery-node-accordion\".  This will <br>\n//  load the script and CSS for the Accordion Node Plugin and all of <br>\n//  the required dependencies. <br>\n<br>\nYUI().use(\"gallery-node-accordion\", function(Y) { <br>\n<br>\n//  Use the \"contentready\" event to initialize the accordion when <br>\n//  the element that represente the accordion <br>\n//  (&#60;div id=\"accordion-1\"&#62;) is ready to be scripted. <br>\n<br>\nY.on(\"contentready\", function () { <br>\n<br>\n//  The scope of the callback will be a Node instance <br>\n//  representing the accordion (&#60;div id=\"accordion-1\"&#62;). <br>\n//  Therefore, since \"this\" represents a Node instance, it <br>\n//  is possible to just call \"this.plug\" passing in a <br>\n//  reference to the Accordion Node Plugin. <br>\n<br>\nthis.plug(Y.Plugin.NodeAccordion, { anim: true, effect: Y.Easing.backIn });\n<br><br>\n}, \"#accordion-1\"); <br>\n<br>      \n}); <br>\n<br>  \n&#60;/script&#62; <br>\n</code>\n</p>", "submodules": [], "classlist": ["Y.Plugin.NodeAccordion"], "filelist": ["gallery-node-accordion.js"], "subdata": {}, "name": "gallery-node-accordion"}}, "classmap": {"Y.Plugin.NodeAccordion": {"name": "Y.Plugin.NodeAccordion", "configs": {"anim": {"default": "false", "type": "{boolean|function}", "description": "Boolean indicating that Y.Anim should be used to expand and collapse items.\nIt also supports a function with an specific effect.\n<p>\n<code>\n&#60;script type=\"text/javascript\"&#62; <br>\n<br>\n//  Call the \"use\" method, passing in \"anim\" and \"gallery-node-accordion\". <br>\n<br>\nYUI().use(\"anim\", \"gallery-node-accordion\", function(Y) { <br>\n<br>\nY.one(\"#myaccordion\").plug(Y.Plugin.NodeAccordion, {<br>\nanim: Y.Easing.backIn<br>\n}); <br>\n<br>  \n&#60;/script&#62; <br>\n</code>\n</p>", "guessedname": "anim", "guessedtype": "property"}, "multiple": {"default": "true", "type": "boolean", "description": "Boolean indicating that more than one item can be opened at the same time.", "guessedname": "multiple", "guessedtype": "property"}, "orientation": {"description": "orientation defines if the accordion will use width or height to expand and collapse items.", "writeonce": "", "default": "height", "guessedname": "orientation", "guessedtype": "property", "type": "string"}, "items": {"readonly": "", "type": "Y.NodeList", "description": "Nodes representing the list of items.", "guessedname": "items", "guessedtype": "property"}, "itemBodySelector": {"description": "Selector used to identify the body of an item within the according markup.\nThe body represents the element that will be animated. This selector is relative\nto the itemSelector attribute. In can also represent the DOM element next to the\nitemSelector match in case you want to use tables or DD/DT/DL markup structures.", "writeonce": "", "value": ".yui3-accordion-item-bd", "guessedname": "itemBodySelector", "guessedtype": "property", "type": "string"}, "minHeight": {"description": "You can specify what will be the height of the element when collapse (only for vertical accordions).\nSometimes forcing the height to 0 breaks the layout in IE6. This depends on the mode.", "writeonce": "", "value": "0", "guessedname": "minHeight", "guessedtype": "property", "type": "number"}, "persistent": {"default": "false", "type": "boolean", "description": "Boolean indicating that one of the items should be open at any given time.", "guessedname": "persistent", "guessedtype": "property"}, "minWidth": {"description": "You can specify what will be the width of the element when collapse (only for horizontal accordions).", "writeonce": "", "value": "0", "guessedname": "minWidth", "guessedtype": "property", "type": "number"}, "triggerSelector": {"description": "Selector used in the delegate statement to identify trigger elements within the accordion markup. \nA trigger element is a DOM element that can be clicked to expand/collapse an individual pane in the accordion.\nThis selector is relative to the plugin HOST and NOT relative to the itemSelector due the fact that the \nitemSelector itself could pontencially be the trigger as well.", "writeonce": "", "value": ".yui3-accordion-item.yui3-accordion-item-trigger, .yui3-accordion-item>.yui3-accordion-item-trigger, .yui3-accordion-item>.yui3-accordion-item-hd .yui3-accordion-item-trigger, .yui3-accordion-item>.yui3-accordion-item-ft .yui3-accordion-item-trigger", "guessedname": "triggerSelector", "guessedtype": "property", "type": "string"}, "fade": {"default": "false", "type": "boolean", "description": "Boolean indicating that animation should include opacity to fade in/out the content of the item.", "guessedname": "fade", "guessedtype": "property"}, "activeItems": {"readonly": "", "type": "Y.NodeList", "description": "Nodes representing the list of active items.", "guessedname": "activeItems", "guessedtype": "property"}, "speed": {"default": "0.4", "type": "numeric", "description": "Numeric value indicating the speed in mili-seconds for the animation process.\nAlso support three predefined strings in lowercase:\n<ol>\n<li>fast = 0.1</li>\n<li>normal = 0.4</li>\n<li>slow = 0.6</li>\n</ol>", "guessedname": "speed", "guessedtype": "property"}, "itemSelector": {"description": "Selector used to identify items within the according markup.\nAn item represents a pane in the accordion.\nThis selector is relative to the plugin HOST.", "writeonce": "", "value": ".yui3-accordion-item", "guessedname": "itemSelector", "guessedtype": "property", "type": "string"}}, "namespace": "Y.Plugin", "module": "gallery-node-accordion", "events": {"multipleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "multipleChange", "description": "Fires when the value for the configuration attribute 'multiple' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minHeightChange", "description": "Fires when the value for the configuration attribute 'minHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "itemsChange", "description": "Fires when the value for the configuration attribute 'items' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "orientationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "orientationChange", "description": "Fires when the value for the configuration attribute 'orientation' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "fadeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fadeChange", "description": "Fires when the value for the configuration attribute 'fade' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "persistentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "persistentChange", "description": "Fires when the value for the configuration attribute 'persistent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemSelectorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "itemSelectorChange", "description": "Fires when the value for the configuration attribute 'itemSelector' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "animChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animChange", "description": "Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "triggerSelectorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "triggerSelectorChange", "description": "Fires when the value for the configuration attribute 'triggerSelector' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeItemsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeItemsChange", "description": "Fires when the value for the configuration attribute 'activeItems' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemBodySelectorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "itemBodySelectorChange", "description": "Fires when the value for the configuration attribute 'itemBodySelector' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "speedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "speedChange", "description": "Fires when the value for the configuration attribute 'speed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minWidthChange", "description": "Fires when the value for the configuration attribute 'minWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "NodeAccordion", "methods": {"_animate": {"return": {"type": "Object", "description": "Animation handler."}, "description": "Using Y.Anim to expand or collapse an item.", "protected": "", "params": [{"type": "String", "name": "id", "description": " Global Unique ID for the animation."}, {"type": "Object", "name": "conf", "description": " Configuration object for the animation."}, {"type": "Function", "name": "fn", "description": " callback function that should be executed after the end of the anim."}], "guessedname": "_animate", "guessedtype": "function"}, "_getItem": {"return": {"type": "Node", "description": "The matching DOM node or null if none found."}, "description": "Searching for an item based on a node reference or an index order.", "protected": "", "params": [{"type": "Node|Number", "name": "node", "description": " Node reference or Node index."}], "guessedname": "_getItem", "guessedtype": "function"}, "toggleItem": {"return": {"type": "object", "description": "Plugin reference for chaining"}, "description": "toggle a certain item.", "params": [{"type": "object", "name": "node", "description": " Node reference"}], "guessedname": "toggleItem", "guessedtype": "function", "public": ""}, "_openItem": {"protected": "", "params": [{"type": "Node", "name": "item", "description": " Node instance representing an item."}], "description": "Open an item.", "guessedname": "_openItem", "guessedtype": "function"}, "collapseAllItems": {"public": "", "return": {"type": "object", "description": "Plugin reference for chaining"}, "description": "Collapsing all items.", "guessedname": "collapseAllItems", "guessedtype": "function"}, "expandItem": {"return": {"type": "object", "description": "Plugin reference for chaining"}, "description": "Expand a certain item.", "params": [{"type": "Node", "name": "node", "description": " Node reference"}], "guessedname": "expandItem", "guessedtype": "function", "public": ""}, "_getItemBody": {"return": {"type": "Node", "description": "The matching DOM node or null if none found."}, "description": "Searching for the body of an item based on an item node reference or an index order.", "protected": "", "params": [{"type": "Node|Number", "name": "node", "description": " Item Node reference or Item index."}], "guessedname": "_getItemBody", "guessedtype": "function"}, "_slidingEnd": {"protected": "", "params": [{"type": "Node", "name": "item", "description": " Item Node reference"}, {"type": "Node", "name": "bd", "description": " Item Body Node reference"}, {"type": "boolean", "name": "active", "description": " whether or not we should also remove the active class"}], "description": "just removing the corresponding sliding classes.", "guessedname": "_slidingEnd", "guessedtype": "function"}, "expandAllItems": {"public": "", "return": {"type": "object", "description": "Plugin reference for chaining"}, "description": "Expanding all items.", "guessedname": "expandAllItems", "guessedtype": "function"}, "_slidingBegin": {"protected": "", "params": [{"type": "Node", "name": "item", "description": " Item Node reference"}, {"type": "Node", "name": "bd", "description": " Item Body Node reference"}, {"type": "boolean", "name": "active", "description": " whether or not we should also add the active class"}], "description": "just adding the corresponding sliding classes.", "guessedname": "_slidingBegin", "guessedtype": "function"}, "collapseItem": {"return": {"type": "object", "description": "Plugin reference for chaining"}, "description": "Collapse a certain item.", "params": [{"type": "Node", "name": "node", "description": " Node reference"}], "guessedname": "collapseItem", "guessedtype": "function", "public": ""}, "_closeItem": {"protected": "", "params": [{"type": "Node", "name": "item", "description": " Node instance representing an item."}], "description": "Closes the specified item.", "guessedname": "_closeItem", "guessedtype": "function"}}, "file": "gallery-node-accordion.js", "guessedtype": "property", "shortname": "NodeAccordion", "properties": {"_root": {"description": "Node instance representing the root node in the accordion.", "default": "null", "protected": "", "guessedname": "_root", "guessedtype": "property", "type": "Node"}, "DynamicForm.ATTRS": {"type": "Object", "static": "", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "The NodeAccordion class is a plugin for a Node instance.  The class is used via  \nthe <a href=\"Node.html#method_plug\"><code>plug</code></a> method of Node and \nshould not be instantiated directly."}}, "version": "3.3.0", "namespaces": ["Y.Plugin"]}