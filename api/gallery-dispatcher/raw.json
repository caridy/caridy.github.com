{"majorversion": 3, "filemap": {"gallery-dispatcher.js": {"classlist": ["Y.Dispatcher"], "name": "gallery-dispatcher.js", "module": "gallery-dispatcher"}}, "modules": {"gallery-dispatcher": {"description": "<p>The Dispatcher satisfies a very common need of developers using the \nYUI library: dynamic execution of HTML Fragments or remote content. Typical strategies to \nfulfill this need, like executing the innerHTML property or referencing remote \nscripts, are unreliable due to browser incompatibilities. The Dispatcher normalize \nthis behavior across all a-grade browsers.\n<p>To use the Dispatcher Module, simply create a new object based on Y.Dispatcher\nand pass a reference to a node that should be handled.</p>\n<p>\n<code>\n&#60;script type=\"text/javascript\"&#62; <br>\n<br>\n//\tCall the \"use\" method, passing in \"gallery-dispatcher\".\t This will <br>\n//\tload the script for the Dispatcher Module and all of <br>\n//\tthe required dependencies. <br>\n<br>\nYUI().use(\"gallery-dispatcher\", function(Y) { <br>\n<br>\n(new Y.Dispatcher ({<br>\nnode: '#demoajax',<br>\ncontent: 'Please wait... (Injecting fragment.html)'<br>\n})).set('uri', 'fragment.html');<br>\n<br>\n<br>\t\t\n&#60;/script&#62; <br>\n</code>\n</p>\n<p>The Dispatcher has several configuration properties that can be \nset via an object literal that is passed as a first argument during the\ninitialization, or using \"set\" method.\n</p>", "submodules": [], "classlist": ["Y.Dispatcher"], "filelist": ["gallery-dispatcher.js"], "subdata": {}, "name": "gallery-dispatcher"}}, "classmap": {"Y.Dispatcher": {"name": "Y.Dispatcher", "configs": {"node": {"default": "null", "type": "object", "description": "YUI Node Object that represent a dynamic area in the page.", "guessedname": "node", "guessedtype": "property"}, "content": {"default": "empty", "type": "string", "description": "default content for the dynamic area", "guessedname": "content", "guessedtype": "property"}, "loading": {"description": "Boolean indicating that a process is undergoing.", "default": "false", "readonly": "", "guessedname": "loading", "guessedtype": "property", "type": "{boolean}"}, "uri": {"default": "null", "type": "string", "description": "URL that should be injected within the host", "guessedname": "uri", "guessedtype": "property"}, "autopurge": {"default": "true", "type": "boolean", "description": "If dispatcher should purge the DOM elements before replacing the content", "guessedname": "autopurge", "guessedtype": "property"}}, "namespace": "Y", "module": "gallery-dispatcher", "events": {"load": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object"}], "description": "Signals when the remote content gets ready to be injected in the page (Y.io->success)"}, "contentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentChange", "description": "Fires when the value for the configuration attribute 'content' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "beforeExecute": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object"}], "description": "Signals rigth after injecting the new content but before executing the script tags."}, "loadingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadingChange", "description": "Fires when the value for the configuration attribute 'loading' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "fetch": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object"}], "description": "Signals when dispatcher starts loading a new remote content (Y.io->start)."}, "purge": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object"}], "description": "Signals the old content has been clean up (Purge), and it's \nready to get the new content."}, "uriChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "uriChange", "description": "Fires when the value for the configuration attribute 'uri' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ready": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object"}], "description": "Signals the moment when a node become ready, right after the \nhtml injecting and the execution of the scripts."}, "autopurgeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autopurgeChange", "description": "Fires when the value for the configuration attribute 'autopurge' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Dispatcher", "methods": {"_dispatch": {"return": {"type": "", "description": "null"}, "description": "Dispatch a content into the code, parsing out the scripts, \ninjecting the code into the DOM, then executing the scripts.", "protected": "", "params": [{"type": "string", "name": "content", "description": " html content that should be injected in the page"}], "guessedname": "_dispatch", "guessedtype": "function"}, "_initEvents": {"protected": "", "description": "Publishes Dispatcher's events", "guessedname": "_initEvents", "guessedtype": "function"}, "stop": {"public": "", "return": {"type": "object", "description": "reference for chaining"}, "description": "Cancel the current loading and execution process immediately", "guessedname": "stop", "guessedtype": "function"}, "_fetch": {"return": {"type": "", "description": "object  Reference to the connection handler"}, "description": "Fetching a remote file using Y.io. The response will be dispatched thru _dispatch method...", "protected": "", "params": [{"type": "string", "name": "uri", "description": " uri that should be loaded using Y.io"}, {"type": "object", "name": "cfg", "description": " configuration object that will be used as base configuration for Y.io \n(http://developer.yahoo.com/yui/3/io/#configuration)"}], "guessedname": "_fetch", "guessedtype": "function"}}, "file": "gallery-dispatcher.js", "guessedtype": "function", "shortname": "Dispatcher", "properties": {"Y.Dispatcher.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute configuration of\nthe component.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "The Dispatcher class represents an object that can manage Node Elements to\ninject HTML content as the content of the Node.."}}, "version": "3.0.0", "namespaces": ["Y"]}